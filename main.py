#1
def caching_fibonacci():
    cache = {}  

    def fibonacci(n):
        if n <= 0:
            return 0
        if n == 1:
            return 1
        if n in cache:  
            return cache[n]

        cache[n] = fibonacci(n - 1) + fibonacci(n - 2)
        return cache[n]

    return fibonacci 


fib = caching_fibonacci()  

print(fib(10))  
print(fib(15))

#2
import re
from typing import Callable

def generator_numbers(text: str):
    # Regular expression pattern to match real numbers
    pattern = r'\b\d+\.\d+\b'
    # Yield each real number found in the text
    for match in re.finditer(pattern, text):
        yield float(match.group())

def sum_profit(text: str, func: Callable):
    # Sum all numbers generated by the provided function
    return sum(func(text))

# Example usage:
text = "The employee's total income consists of several parts: 1000.01 as the main income, supplemented by additional income of $27.45 and $324.00."
total_income = sum_profit(text, generator_numbers)
print(f"Total income: {total_income}")

#3
def parse_input(user_input):
    cmd, *args = user_input.split()
    cmd = cmd.strip().lower()
    return cmd, *args

def input_error(func):
    def inner(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except KeyError:
            return "Contact not found."
        except ValueError:
            return "Give me name and phone please."
        except IndexError:
            return "Not enough arguments provided."
        except Exception as e:
            return f"An error occurred: {str(e)}"
    return inner
@input_error
def add_contact(args, contacts):
    name, phone = args
    contacts[name] = phone
    return "Contact added."
@input_error
def change_contact(args, contacts):
    name, phone = args
    if name in concats:
        raise KeyError("Contact")
    contacts[name] = phone
    return "contact updated successfully"
@input_error
def show_contact(args, contacts):
    name, _ = args
    return contacts[name]

def main():
    contacts = {}
    print("Welcome to the assistant bot!")
    while True:
        user_input = input("Enter a command: ")
        command, *args = parse_input(user_input)

        if command in ["close", "exit"]:
            print("Good bye!")
            break
        elif command == "hello":
            print("How can I help you?")
        elif command == "add":
            print(add_contact(args, contacts))
        elif command == "change":
            print(change_contact(args, contacts))
        elif command == "show":
            print(show_contact(args,contacts))

        else:
            print("Invalid command.")

if __name__ == "__main__":
    main()